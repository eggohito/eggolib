plugins {
	id 'com.github.breadmoirai.github-release' version '2.4.1'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'io.github.juuxel.loom-quiltflower' version '1.10.0'
	id 'com.modrinth.minotaur' version'2.+'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	exclusiveContent {

		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}

		filter {
			includeGroup "maven.modrinth"
		}

	}
	maven {
		name = "QuiltMC"
		url = "https://maven.quiltmc.org/repository/release"
	}
	maven {
		name = "Ladysnake Mods"
		url = "https://maven.ladysnake.org/releases"
	}
	maven {
		url = "https://maven.cafeteria.dev"
		content {
			includeGroup "net.adriantodt.fabricmc"
		}
	}
	maven {
		url = "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		url = "https://masa.dy.fi/maven"
	}
	maven {
		url = "https://jitpack.io"
	}
	maven {
		url = "https://maven.shedaniel.me"
	}
	maven {
		url = "https://maven.terraformersmc.com"
	}
}

loom {

	accessWidenerPath = file("src/main/resources/eggolib.accesswidener")

	mods {
		"eggolib" {
			sourceSet(sourceSets.main)
			sourceSet(sourceSets.test)
		}
	}

	runs {
		client {
			client()
			source(sourceSets.test)
			setConfigName("Minecraft Client")
		}
		server {
			server()
			source(sourceSets.test)
			setConfigName("Minecraft Server")
		}
	}

}

dependencies {
	
	implementation "com.demonwav.mcdev:annotations:1.0"

	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	// Fabric Loader
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

	// Reach Entity Attributes by jamieswhiteshirt
	modImplementation "com.jamieswhiteshirt:reach-entity-attributes:${project.reach_version}"

	// Apoli by Apace100
	modImplementation "com.github.apace100:apoli:${project.apoli_version}"
	include "com.github.apace100:apoli:${project.apoli_version}"

	// Origins by Apace100
	modImplementation "com.github.apace100:origins-fabric:${project.origins_version}"

	// BreathingLib (fork) by eggohito
	modImplementation "com.github.eggohito:BreathingLib:${project.breathing_lib_version}"
	include "com.github.eggohito:BreathingLib:${project.breathing_lib_version}"

	//  Modmenu
	modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"

}

processResources {

	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}

}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release.set(17)
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

curseforge {

	var token = System.getenv("CURSEFORGE_TOKEN")

	if (token == null || token.isEmpty()) {
		System.err.println("Cannot publish to CurseForge: missing token!")
		return
	}

	var compatibleMinecraftVersions = compatible_minecraft_versions.split(", ")
	var minecraftVersionRange = compatibleMinecraftVersions.length > 1
		? "(${compatibleMinecraftVersions.first()} - ${compatibleMinecraftVersions.last()})"
		: "(${compatibleMinecraftVersions.first()})"

	setApiKey(token)
	project {

		setId(curseforge_id)
		setReleaseType('release')

		setChangelog(new File("${rootDir}/CHANGELOG.md").getText('UTF-8'))
		setChangelogType('markdown')

		compatibleMinecraftVersions.each { String minecraftVersion -> addGameVersion(minecraftVersion) }
		compatible_java_versions.split(", ").each {String javaVersion -> addGameVersion("Java " + javaVersion) }
		compatible_mod_loaders.split(", ").each { String modLoader -> addGameVersion(modLoader) }

		mainArtifact(remapJar) {
			setDisplayName("${mod_name} v${mod_version} ${minecraftVersionRange}")
			relations {
				required_dependencies.split(", ").each { String project -> requiredDependency(project) }
				optional_dependencies.split(", ").each { String project -> optionalDependency(project) }
			}
		}

		addArtifact(remapSourcesJar) {
			setDisplayName("${mod_name} v${mod_version} ${minecraftVersionRange} [Sources]")
		}

	}

}

modrinth {

	var token = System.getenv("MODRINTH_TOKEN")

	if (token == null || token.isEmpty()) {
		System.err.println("Cannot publish to Modrinth: missing token!")
		return
	}

	var compatibleMinecraftVersions = compatible_minecraft_versions.split(", ")
	var minecraftVersionRange = compatibleMinecraftVersions.length > 1
		? "(${compatibleMinecraftVersions.first()} - ${compatibleMinecraftVersions.last()})"
		: "(${compatibleMinecraftVersions.first()})"

	setToken(token)
	setProjectId(modrinth_id)

	setVersionName("${mod_name} v${mod_version} ${minecraftVersionRange}")
	setVersionNumber("v${mod_version}-${System.getenv("GITHUB_COMMITISH")}")
	setVersionType("release")

	setUploadFile(remapJar)
	additionalFiles.add(remapSourcesJar)

	setChangelog(new File("${getRootDir()}/CHANGELOG.md").getText('UTF-8'))

	compatibleMinecraftVersions.each { String minecraftVersion -> gameVersions.add(minecraftVersion) }
	compatible_mod_loaders.split(", ").each { String modLoader -> loaders.add(modLoader) }

	dependencies {
		required_dependencies.split(", ").each { String project -> required.project(project) }
		optional_dependencies.split(", ").each { String project -> optional.project(project) }
	}

}

githubRelease {

	var token = System.getenv("GITHUB_TOKEN")

	if (token == null || token.isEmpty()) {
		System.err.println("Cannot publish to GitHub: missing token!")
		return
	}

	var compatibleMinecraftVersions = compatible_minecraft_versions.split(", ")
	var minecraftVersionRange = compatibleMinecraftVersions.length > 1
		? "(${compatibleMinecraftVersions.first()} - ${compatibleMinecraftVersions.last()})"
		: "(${compatibleMinecraftVersions.first()})"

	setToken(token)

	setOwner(System.getenv("GITHUB_REPO_OWNER"))
	setRepo(System.getenv("GITHUB_REPO"))

	var commitish = System.getenv("GITHUB_COMMITISH")
	setTagName("v${mod_version}-${commitish}")
	setTargetCommitish(commitish)

	setReleaseName("${mod_name} v${mod_version} ${minecraftVersionRange}")
	releaseAssets(remapJar, remapSourcesJar)

	setBody(new File("${getRootDir()}/CHANGELOG.md").getText('UTF-8'))

}

plugins {
	id 'com.github.breadmoirai.github-release' version '2.4.1'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'io.github.juuxel.loom-quiltflower' version '1.10.0'
	id 'com.modrinth.minotaur' version'2.+'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name = "Ladysnake Libs"
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
	maven {
		name = "JitPack"
		url = 'https://jitpack.io'
	}
	maven {
		url = 'https://maven.cafeteria.dev'
		content {
			includeGroup 'net.adriantodt.fabricmc'
		}
	}
	maven {
		url = 'https://maven.jamieswhiteshirt.com/libs-release'
		content {
			includeGroup 'com.jamieswhiteshirt'
		}
	}
	maven {
		url = 'https://maven.shedaniel.me'
	}
	maven {
		url = 'https://maven.terraformersmc.com'
	}
}

loom {

	accessWidenerPath = file("src/main/resources/eggolib.accesswidener")

	mods {
		register("eggolib") {
			sourceSet(sourceSets.main)
			sourceSet(sourceSets.test)
		}
	}

	runs {
		client {
			client()
			source(sourceSets.test)
			setConfigName("Minecraft Client")
		}
		server {
			server()
			source(sourceSets.test)
			setConfigName("Minecraft Server")
		}
	}

}

dependencies {
	
	implementation "com.demonwav.mcdev:annotations:1.0"

	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	//	MixinExtras by LlamaLad7
	implementation "com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}"
	annotationProcessor "com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}"
	include "com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}"

	// Fabric Loader
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

	// Reach Entity Attributes by jamieswhiteshirt
	modImplementation "com.jamieswhiteshirt:reach-entity-attributes:${project.reach_version}"

	// Apoli by Apace100
	modImplementation "com.github.apace100:apoli:${project.apoli_version}"
	include "com.github.apace100:apoli:${project.apoli_version}"

	// Origins by Apace100
	modImplementation "com.github.apace100:origins-fabric:${project.origins_version}"

	// BreathingLib (fork) by eggohito
	modImplementation "com.github.eggohito:BreathingLib:${project.breathing_lib_version}"
	include "com.github.eggohito:BreathingLib:${project.breathing_lib_version}"

}

processResources {

	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}

}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release.set(17)
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

curseforge {
	if (System.getenv("CURSEFORGE_TOKEN") != null) {

		apiKey = System.getenv("CURSEFORGE_TOKEN")
		project {

			id = curseforge_id

			changelog = new File("${rootDir}/CHANGELOG.md").getText('UTF-8')
			changelogType = 'markdown'

			releaseType = 'release'

			compatible_minecraft_versions.split(", ").each { String minecraftVersion -> addGameVersion minecraftVersion }
			compatible_java_versions.split(", ").each { String javaVersion -> addGameVersion "Java " + javaVersion }
			compatible_mod_loaders.split(", ").each { String modLoader -> addGameVersion modLoader }

			mainArtifact(remapJar) {
				displayName = "v${version} (${compatible_minecraft_versions})"
				relations {
					required_dependencies.split(", ").each { String project -> requiredDependency project }
					optional_dependencies.split(", ").each { String project -> optionalDependency project }
				}
			}

			addArtifact(remapSourcesJar)

		}

	}
}

modrinth {
	if (System.getenv("MODRINTH_TOKEN") != null) {

		token = System.getenv("MODRINTH_TOKEN")
		projectId = modrinth_id

		versionName = "eggolib v${version}"
		versionNumber = "v${version}-${github_commitish}"
		versionType = "release"

		uploadFile = remapJar
        additionalFiles.add(remapSourcesJar)
		changelog = new File("${rootDir}/CHANGELOG.md").getText('UTF-8')

		gameVersions.addAll(compatible_minecraft_versions.split(", ").toList())
		loaders.addAll(compatible_mod_loaders.split(", ").collect { String loader -> loader.toLowerCase(Locale.ROOT)})

		dependencies {
			required_dependencies.split(", ").each { String project -> required.project project }
			optional_dependencies.split(", ").each { String project -> optional.project project }
		}

	}
}

githubRelease {
	if (System.getenv("GITHUB_TOKEN") != null) {

		token = System.getenv("GITHUB_TOKEN")

		owner = github_owner
		repo = github_repo

		tagName = "v${version}-${github_commitish}"
		targetCommitish = github_commitish

		releaseName = "${mod_name} v${mod_version} (${compatible_minecraft_versions})"
        releaseAssets(remapJar, remapSourcesJar)

		body = new File("${rootDir}/CHANGELOG.md").getText('UTF-8')

	}
}
